// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/predicate"
	"backend/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetProvider sets the "provider" field.
func (_u *UserUpdate) SetProvider(v string) *UserUpdate {
	_u.mutation.SetProvider(v)
	return _u
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (_u *UserUpdate) SetNillableProvider(v *string) *UserUpdate {
	if v != nil {
		_u.SetProvider(*v)
	}
	return _u
}

// SetProviderID sets the "provider_id" field.
func (_u *UserUpdate) SetProviderID(v string) *UserUpdate {
	_u.mutation.SetProviderID(v)
	return _u
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (_u *UserUpdate) SetNillableProviderID(v *string) *UserUpdate {
	if v != nil {
		_u.SetProviderID(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdate) SetEmail(v string) *UserUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEmail(v *string) *UserUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *UserUpdate) ClearEmail() *UserUpdate {
	_u.mutation.ClearEmail()
	return _u
}

// SetName sets the "name" field.
func (_u *UserUpdate) SetName(v string) *UserUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableName(v *string) *UserUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *UserUpdate) ClearName() *UserUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetPicture sets the "picture" field.
func (_u *UserUpdate) SetPicture(v string) *UserUpdate {
	_u.mutation.SetPicture(v)
	return _u
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePicture(v *string) *UserUpdate {
	if v != nil {
		_u.SetPicture(*v)
	}
	return _u
}

// ClearPicture clears the value of the "picture" field.
func (_u *UserUpdate) ClearPicture() *UserUpdate {
	_u.mutation.ClearPicture()
	return _u
}

// SetAccessToken sets the "access_token" field.
func (_u *UserUpdate) SetAccessToken(v string) *UserUpdate {
	_u.mutation.SetAccessToken(v)
	return _u
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAccessToken(v *string) *UserUpdate {
	if v != nil {
		_u.SetAccessToken(*v)
	}
	return _u
}

// ClearAccessToken clears the value of the "access_token" field.
func (_u *UserUpdate) ClearAccessToken() *UserUpdate {
	_u.mutation.ClearAccessToken()
	return _u
}

// SetRefreshToken sets the "refresh_token" field.
func (_u *UserUpdate) SetRefreshToken(v string) *UserUpdate {
	_u.mutation.SetRefreshToken(v)
	return _u
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (_u *UserUpdate) SetNillableRefreshToken(v *string) *UserUpdate {
	if v != nil {
		_u.SetRefreshToken(*v)
	}
	return _u
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (_u *UserUpdate) ClearRefreshToken() *UserUpdate {
	_u.mutation.ClearRefreshToken()
	return _u
}

// SetTokenType sets the "token_type" field.
func (_u *UserUpdate) SetTokenType(v string) *UserUpdate {
	_u.mutation.SetTokenType(v)
	return _u
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (_u *UserUpdate) SetNillableTokenType(v *string) *UserUpdate {
	if v != nil {
		_u.SetTokenType(*v)
	}
	return _u
}

// ClearTokenType clears the value of the "token_type" field.
func (_u *UserUpdate) ClearTokenType() *UserUpdate {
	_u.mutation.ClearTokenType()
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *UserUpdate) SetExpiresAt(v time.Time) *UserUpdate {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *UserUpdate) SetNillableExpiresAt(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (_u *UserUpdate) ClearExpiresAt() *UserUpdate {
	_u.mutation.ClearExpiresAt()
	return _u
}

// SetRole sets the "role" field.
func (_u *UserUpdate) SetRole(v string) *UserUpdate {
	_u.mutation.SetRole(v)
	return _u
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (_u *UserUpdate) SetNillableRole(v *string) *UserUpdate {
	if v != nil {
		_u.SetRole(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdate) SetUpdatedAt(v time.Time) *UserUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdate) check() error {
	if v, ok := _u.mutation.Provider(); ok {
		if err := user.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "User.provider": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProviderID(); ok {
		if err := user.ProviderIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_id", err: fmt.Errorf(`ent: validator failed for field "User.provider_id": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Provider(); ok {
		_spec.SetField(user.FieldProvider, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProviderID(); ok {
		_spec.SetField(user.FieldProviderID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Picture(); ok {
		_spec.SetField(user.FieldPicture, field.TypeString, value)
	}
	if _u.mutation.PictureCleared() {
		_spec.ClearField(user.FieldPicture, field.TypeString)
	}
	if value, ok := _u.mutation.AccessToken(); ok {
		_spec.SetField(user.FieldAccessToken, field.TypeString, value)
	}
	if _u.mutation.AccessTokenCleared() {
		_spec.ClearField(user.FieldAccessToken, field.TypeString)
	}
	if value, ok := _u.mutation.RefreshToken(); ok {
		_spec.SetField(user.FieldRefreshToken, field.TypeString, value)
	}
	if _u.mutation.RefreshTokenCleared() {
		_spec.ClearField(user.FieldRefreshToken, field.TypeString)
	}
	if value, ok := _u.mutation.TokenType(); ok {
		_spec.SetField(user.FieldTokenType, field.TypeString, value)
	}
	if _u.mutation.TokenTypeCleared() {
		_spec.ClearField(user.FieldTokenType, field.TypeString)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(user.FieldExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.ExpiresAtCleared() {
		_spec.ClearField(user.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetProvider sets the "provider" field.
func (_u *UserUpdateOne) SetProvider(v string) *UserUpdateOne {
	_u.mutation.SetProvider(v)
	return _u
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableProvider(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetProvider(*v)
	}
	return _u
}

// SetProviderID sets the "provider_id" field.
func (_u *UserUpdateOne) SetProviderID(v string) *UserUpdateOne {
	_u.mutation.SetProviderID(v)
	return _u
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableProviderID(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetProviderID(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdateOne) SetEmail(v string) *UserUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmail(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *UserUpdateOne) ClearEmail() *UserUpdateOne {
	_u.mutation.ClearEmail()
	return _u
}

// SetName sets the "name" field.
func (_u *UserUpdateOne) SetName(v string) *UserUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *UserUpdateOne) ClearName() *UserUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetPicture sets the "picture" field.
func (_u *UserUpdateOne) SetPicture(v string) *UserUpdateOne {
	_u.mutation.SetPicture(v)
	return _u
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePicture(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetPicture(*v)
	}
	return _u
}

// ClearPicture clears the value of the "picture" field.
func (_u *UserUpdateOne) ClearPicture() *UserUpdateOne {
	_u.mutation.ClearPicture()
	return _u
}

// SetAccessToken sets the "access_token" field.
func (_u *UserUpdateOne) SetAccessToken(v string) *UserUpdateOne {
	_u.mutation.SetAccessToken(v)
	return _u
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAccessToken(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetAccessToken(*v)
	}
	return _u
}

// ClearAccessToken clears the value of the "access_token" field.
func (_u *UserUpdateOne) ClearAccessToken() *UserUpdateOne {
	_u.mutation.ClearAccessToken()
	return _u
}

// SetRefreshToken sets the "refresh_token" field.
func (_u *UserUpdateOne) SetRefreshToken(v string) *UserUpdateOne {
	_u.mutation.SetRefreshToken(v)
	return _u
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableRefreshToken(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetRefreshToken(*v)
	}
	return _u
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (_u *UserUpdateOne) ClearRefreshToken() *UserUpdateOne {
	_u.mutation.ClearRefreshToken()
	return _u
}

// SetTokenType sets the "token_type" field.
func (_u *UserUpdateOne) SetTokenType(v string) *UserUpdateOne {
	_u.mutation.SetTokenType(v)
	return _u
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableTokenType(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetTokenType(*v)
	}
	return _u
}

// ClearTokenType clears the value of the "token_type" field.
func (_u *UserUpdateOne) ClearTokenType() *UserUpdateOne {
	_u.mutation.ClearTokenType()
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *UserUpdateOne) SetExpiresAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableExpiresAt(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (_u *UserUpdateOne) ClearExpiresAt() *UserUpdateOne {
	_u.mutation.ClearExpiresAt()
	return _u
}

// SetRole sets the "role" field.
func (_u *UserUpdateOne) SetRole(v string) *UserUpdateOne {
	_u.mutation.SetRole(v)
	return _u
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableRole(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetRole(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdateOne) SetUpdatedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdateOne) check() error {
	if v, ok := _u.mutation.Provider(); ok {
		if err := user.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "User.provider": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProviderID(); ok {
		if err := user.ProviderIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_id", err: fmt.Errorf(`ent: validator failed for field "User.provider_id": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Provider(); ok {
		_spec.SetField(user.FieldProvider, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProviderID(); ok {
		_spec.SetField(user.FieldProviderID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Picture(); ok {
		_spec.SetField(user.FieldPicture, field.TypeString, value)
	}
	if _u.mutation.PictureCleared() {
		_spec.ClearField(user.FieldPicture, field.TypeString)
	}
	if value, ok := _u.mutation.AccessToken(); ok {
		_spec.SetField(user.FieldAccessToken, field.TypeString, value)
	}
	if _u.mutation.AccessTokenCleared() {
		_spec.ClearField(user.FieldAccessToken, field.TypeString)
	}
	if value, ok := _u.mutation.RefreshToken(); ok {
		_spec.SetField(user.FieldRefreshToken, field.TypeString, value)
	}
	if _u.mutation.RefreshTokenCleared() {
		_spec.ClearField(user.FieldRefreshToken, field.TypeString)
	}
	if value, ok := _u.mutation.TokenType(); ok {
		_spec.SetField(user.FieldTokenType, field.TypeString, value)
	}
	if _u.mutation.TokenTypeCleared() {
		_spec.ClearField(user.FieldTokenType, field.TypeString)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(user.FieldExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.ExpiresAtCleared() {
		_spec.ClearField(user.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
